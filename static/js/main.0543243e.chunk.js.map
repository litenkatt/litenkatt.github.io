{"version":3,"sources":["LinkButton.js","pdfView.js","App.js","serviceWorker.js","index.js","../node_modules/pdfjs-dist/build sync","CV2019_Ninni_Hornaeus.pdf"],"names":["PureComponent","PdfView","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","numPages","pageNumber","onDocumentLoadSuccess","_ref","setState","pdfjs","GlobalWorkerOptions","workerSrc","concat","version","_this$state","react_default","a","createElement","entry","file","onLoadSuccess","App","className","pdfView","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","__webpack_require__","p"],"mappings":"yLAEyBA,wCCiCVC,cA9BX,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAIVQ,MAAQ,CACJC,SAAU,KACVC,WAAY,GAPET,EAUhBU,sBAAwB,SAAAC,GAAkB,IAAfH,EAAeG,EAAfH,SACzBR,EAAKY,SAAS,CAAEJ,cAThBK,QAAMC,oBAAoBC,UAA1B,2CAAAC,OAAiFH,QAAMI,QAAvF,kBAFcjB,wEAcP,IAAAkB,EAC0Bf,KAAKI,MAA9BE,EADDS,EACCT,WADDS,EACaV,SAEpB,OACEW,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,SAAD,CACEC,KAAMA,IACNC,cAAerB,KAAKO,uBAEpBS,EAAAC,EAAAC,cAACC,EAAA,KAAD,CAAMb,WAAYA,aAxBVZ,iBCYP4B,0LARX,OACEN,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OACbP,EAAAC,EAAAC,cAACM,EAAD,CAASD,UAAU,gBAJTE,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iCEnInB,SAAAC,EAAAC,GACA,IAAAC,EAAA,IAAAC,MAAA,uBAAAF,EAAA,KAEA,MADAC,EAAAE,KAAA,mBACAF,EAEAF,EAAAK,KAAA,WAAuC,UACvCL,EAAAM,QAAAN,EACAO,EAAAC,QAAAR,EACAA,EAAAS,GAAA,uBCRAF,EAAAC,QAAiBE,EAAAC,EAAuB","file":"static/js/main.0543243e.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\r\n\r\nclass LinkButton extends PureComponent{\r\n    render(){\r\n    const { children } = this.props;\r\n        return(\r\n            <a href={this.props.link}>{children}</a>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LinkButton;","import React, { PureComponent } from 'react';\r\nimport { Document, Page, pdfjs } from 'react-pdf';\r\nimport file from '.\\\\CV2019_Ninni_Hornaeus.pdf';\r\n\r\nclass PdfView extends PureComponent{\r\n    constructor(props){\r\n        super(props);\r\n        pdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\r\n    }\r\n\r\n    state = {\r\n        numPages: null,\r\n        pageNumber: 1,\r\n      }\r\n     \r\n      onDocumentLoadSuccess = ({ numPages }) => {\r\n        this.setState({ numPages });\r\n      }\r\n     \r\n      render() {\r\n        const { pageNumber, numPages } = this.state;\r\n     \r\n        return (\r\n          <div>\r\n            <Document\r\n              file={file}\r\n              onLoadSuccess={this.onDocumentLoadSuccess}\r\n            >\r\n              <Page pageNumber={pageNumber} />\r\n            </Document>\r\n          </div>\r\n        );\r\n      }\r\n}\r\n\r\nexport default PdfView;","import React, { Component } from 'react';\r\nimport LinkButton from './LinkButton.js';\r\nimport PdfView from './pdfView.js';\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <PdfView className=\"pdf\"/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 26;","module.exports = __webpack_public_path__ + \"static/media/CV2019_Ninni_Hornaeus.db3e5541.pdf\";"],"sourceRoot":""}